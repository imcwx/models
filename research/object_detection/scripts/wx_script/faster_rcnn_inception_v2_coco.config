# Faster R-CNN with Inception v2, configuration for MSCOCO Dataset.
# Users should configure the fine_tune_checkpoint field in the train config as
# well as the label_map_path and input_path fields in the train_input_reader and
# eval_input_reader. Search for "PATH_TO_BE_CONFIGURED" to find the fields that
# should be configured.


model {
  faster_rcnn {
    num_classes: 55
    image_resizer {
    	#fixed_shape_resizer {
    	#height: 1080
    	#width: 800
    	#}
      keep_aspect_ratio_resizer {
	      min_dimension: 600
        max_dimension: 800
        # min_dimension: 800
        # max_dimension: 1080
      }
    }
    feature_extractor {
      type: 'faster_rcnn_inception_v2'
      first_stage_features_stride: 16
    }
    first_stage_anchor_generator {
      grid_anchor_generator {
        scales: [0.25, 0.5, 1.0, 2.0]
        # scales: [0.25, 0.5, 1.0, 2.0]
        aspect_ratios: [0.25, 0.5, 1.0, 2.0]
        # aspect_ratios: [0.5, 1.0, 2.0]
        height_stride: 16
        width_stride: 16
      }
    }
    first_stage_box_predictor_conv_hyperparams {
      op: CONV
      regularizer {
        l2_regularizer {
          weight: 0.0
        }
      }
      initializer {
        truncated_normal_initializer {
          stddev: 0.01
        }
      }
    }
    first_stage_nms_score_threshold: 0.0
    first_stage_nms_iou_threshold: 0.7
    first_stage_max_proposals: 300
    first_stage_localization_loss_weight: 2.0
    first_stage_objectness_loss_weight: 1.0
    initial_crop_size: 14
    maxpool_kernel_size: 2
    maxpool_stride: 2
    second_stage_box_predictor {
      mask_rcnn_box_predictor {
        use_dropout: false
        dropout_keep_probability: 1.0
        fc_hyperparams {
          op: FC
          regularizer {
            l2_regularizer {
              weight: 0.0
            }
          }
          initializer {
            variance_scaling_initializer {
              factor: 1.0
              uniform: true
              mode: FAN_AVG
            }
          }
        }
      }
    }
    second_stage_post_processing {
      batch_non_max_suppression {
        score_threshold: 0.0
        iou_threshold: 0.6
        max_detections_per_class: 100
        max_total_detections: 300
      }
      score_converter: SOFTMAX
    }
    second_stage_localization_loss_weight: 2.0
    second_stage_classification_loss_weight: 1.0
  }
}

train_config: {
  batch_size: 1
  optimizer {
    # momentum_optimizer: {
    #  learning_rate: {
    #    manual_step_learning_rate {
    #      initial_learning_rate: 0.0002
    #      schedule {
    #        step: 0
    #        learning_rate: .0002
    #     }
    #      schedule {
    #        step: 15000
    #        learning_rate: .0001
    #      }
    #     schedule {
    #        step: 30000
    #        learning_rate: .00005
    #      }
    #      schedule {
    #        step: 50000
    #        learning_rate: .000025
    #      }
    #      schedule {
    #        step: 75000
    #        learning_rate: .0000125
    #      }
    #      schedule {
    #       step: 100000
    #        learning_rate: .00000625
    #      }
    #   }
    #  }
    #  momentum_optimizer_value: 0.9
    #}
    #use_moving_average: false

    adam_optimizer: {
      learning_rate: {
        constant_learning_rate {
          learning_rate : 0.0002
        }
        
      }
    }
    #rms_prop_optimizer: {
    #  learning_rate: {
    #    exponential_decay_learning_rate {
    #      initial_learning_rate: 0.0002
    #      decay_steps: 15000
    #      decay_factor: 0.70
    #    }
    #  }
    #  momentum_optimizer_value: 0.6
    #  decay: 0.7
    #  epsilon: 1.0
    #}

  }
  gradient_clipping_by_norm: 10.0
  fine_tune_checkpoint: "/home/wenxiang/Documents/ssd/checkpoint/inception_v2.ckpt"
  from_detection_checkpoint: false
  
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the COCO dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.
  num_steps: 800000

  data_augmentation_options {
    random_crop_pad_image {
    }
  }

  data_augmentation_options {
    random_black_patches{
    }
  }

  #data_augmentation_options {
  #  random_rotation90 {
  #  }
  #}

  data_augmentation_options {
    random_adjust_brightness {
      max_delta:0.10
    }
  }

  data_augmentation_options {
    random_adjust_contrast {
    }
  }

  #data_augmentation_options {
  #  random_adjust_hue {
  #  }
  #}

  data_augmentation_options {
    random_adjust_saturation {
    }
  }

  #data_augmentation_options {
  #  random_distort_color {
  #  }
  #

  data_augmentation_options {
    random_jitter_boxes {
    }
  }

}

train_input_reader: {
  tf_record_input_reader {
    # input_path: "/home/wenxiang/Documents/ssd/rb_dataset/train_tfrecord/data/train_flag_2_800_600.record"
    input_path: "/dev/shm/train_flag_2_800_600.record"
  }
  label_map_path: "/home/wenxiang/Documents/ssd/rb_dataset/train_tfrecord/data/label_map.pbtxt"
  num_readers: 8
}

eval_config: {
  num_examples: 12
  # Note: The below line limits the evaluation process to 10 evaluations.
  # Remove the below line to evaluate indefinitely.
  # max_evals: 10
  # default is 120
  eval_interval_secs:1200
  #default is 10
  num_visualizations:12
}

eval_input_reader: {
  tf_record_input_reader {
    input_path: "/home/wenxiang/Documents/ssd/rb_dataset/train_tfrecord/data/eval_new.record"
  }
  label_map_path: "/home/wenxiang/Documents/ssd/rb_dataset/train_tfrecord/data/label_map.pbtxt"
  shuffle: false
  num_readers: 1
  num_epochs: 1
}
